{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMjcReMIuAWfl4HJf/8GRnn",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mypotato20-ops/income_tax.py/blob/main/%ED%8C%80%EB%B3%84%EC%9D%BC%EC%A0%95%EA%B3%B5%EC%9C%A0.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 404
        },
        "id": "v_ZScXLwuenb",
        "outputId": "3ae10d82-daf3-4018-be49-0b422768019c"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'streamlit'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-2725671994.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mstreamlit\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mst\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mplotly\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexpress\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mdatetime\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdatetime\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimedelta\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcalendar\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'streamlit'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ],
      "source": [
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "from datetime import datetime, timedelta\n",
        "import calendar\n",
        "import sys\n",
        "import os\n",
        "\n",
        "sys.path.append(os.path.dirname(os.path.abspath(__file__)))\n",
        "\n",
        "from utils.data_manager import (\n",
        "    load_members, add_schedule, delete_schedule,\n",
        "    add_member, get_member_by_id, check_conflicts,\n",
        "    get_statistics, load_schedules\n",
        ")\n",
        "\n",
        "st.set_page_config(page_title=\"ÌåÄ ÏùºÏ†ï Í¥ÄÎ¶¨\", page_icon=\"üìÖ\", layout=\"wide\")\n",
        "\n",
        "# ÏÑ∏ÏÖò ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî\n",
        "if 'current_date' not in st.session_state:\n",
        "    st.session_state.current_date = datetime.now()\n",
        "if 'selected_member' not in st.session_state:\n",
        "    st.session_state.selected_member = 'all'\n",
        "if 'view' not in st.session_state:\n",
        "    st.session_state.view = 'calendar'\n",
        "if 'notifications' not in st.session_state:\n",
        "    st.session_state.notifications = []\n",
        "if 'show_add_modal' not in st.session_state:\n",
        "    st.session_state.show_add_modal = False\n",
        "\n",
        "members = load_members()\n",
        "schedules = load_schedules()\n",
        "stats = get_statistics()\n",
        "\n",
        "st.markdown(\"\"\"\n",
        "<style>\n",
        ".schedule-item {\n",
        "    padding: 8px;\n",
        "    margin: 4px 0;\n",
        "    border-radius: 5px;\n",
        "    font-size: 0.85em;\n",
        "}\n",
        "</style>\n",
        "\"\"\", unsafe_allow_html=True)\n",
        "\n",
        "st.title(\"üìÖ ÌåÄ ÏùºÏ†ï Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú\")\n",
        "\n",
        "col1, col2, col3, col4 = st.columns([2, 2, 2, 6])\n",
        "with col1:\n",
        "    if st.button(\"üìÖ Ï∫òÎ¶∞Îçî\", use_container_width=True):\n",
        "        st.session_state.view = 'calendar'\n",
        "        st.rerun()\n",
        "with col2:\n",
        "    if st.button(\"üìä ÌÜµÍ≥Ñ\", use_container_width=True):\n",
        "        st.session_state.view = 'stats'\n",
        "        st.rerun()\n",
        "with col3:\n",
        "    if st.button(\"üë• ÌåÄÏõê Í¥ÄÎ¶¨\", use_container_width=True):\n",
        "        st.session_state.view = 'members'\n",
        "        st.rerun()\n",
        "\n",
        "st.markdown(\"---\")\n",
        "\n",
        "if st.session_state.notifications:\n",
        "    for i, notif in enumerate(st.session_state.notifications):\n",
        "        col1, col2 = st.columns([10, 1])\n",
        "        with col1:\n",
        "            st.warning(f\"‚ö†Ô∏è {notif}\")\n",
        "        with col2:\n",
        "            if st.button(\"‚úï\", key=f\"close_{i}\"):\n",
        "                st.session_state.notifications.pop(i)\n",
        "                st.rerun()\n",
        "\n",
        "# Ï∫òÎ¶∞Îçî Î∑∞\n",
        "if st.session_state.view == 'calendar':\n",
        "    col1, col2, col3, col4, col5, col6 = st.columns([1, 1, 1, 3, 2, 2])\n",
        "\n",
        "    with col1:\n",
        "        if st.button(\"‚óÄ\"):\n",
        "            st.session_state.current_date = st.session_state.current_date - timedelta(days=30)\n",
        "            st.rerun()\n",
        "    with col2:\n",
        "        if st.button(\"Ïò§Îäò\"):\n",
        "            st.session_state.current_date = datetime.now()\n",
        "            st.rerun()\n",
        "    with col3:\n",
        "        if st.button(\"‚ñ∂\"):\n",
        "            st.session_state.current_date = st.session_state.current_date + timedelta(days=30)\n",
        "            st.rerun()\n",
        "    with col4:\n",
        "        st.markdown(f\"### {st.session_state.current_date.year}ÎÖÑ {st.session_state.current_date.month}Ïõî\")\n",
        "    with col5:\n",
        "        member_options = ['Ï†ÑÏ≤¥ ÌåÄÏõê'] + [m['name'] for m in members]\n",
        "        selected_name = st.selectbox(\"ÌåÄÏõê ÌïÑÌÑ∞\", member_options)\n",
        "        if selected_name == 'Ï†ÑÏ≤¥ ÌåÄÏõê':\n",
        "            st.session_state.selected_member = 'all'\n",
        "        else:\n",
        "            selected = next((m for m in members if m['name'] == selected_name), None)\n",
        "            st.session_state.selected_member = selected['id'] if selected else 'all'\n",
        "    with col6:\n",
        "        if st.button(\"‚ûï ÏùºÏ†ï Ï∂îÍ∞Ä\", type=\"primary\"):\n",
        "            st.session_state.show_add_modal = not st.session_state.show_add_modal\n",
        "\n",
        "    if st.session_state.show_add_modal:\n",
        "        with st.container():\n",
        "            st.markdown(\"### ‚ûï ÏùºÏ†ï Ï∂îÍ∞Ä\")\n",
        "            col1, col2 = st.columns(2)\n",
        "            with col1:\n",
        "                selected_member_name = st.selectbox(\"ÌåÄÏõê\", [m['name'] for m in members], key='add_member')\n",
        "                schedule_type = st.selectbox(\"Ïú†Ìòï\", [\"Ïó∞Ï∞®\", \"Î∞òÏ∞®\", \"Î≥ëÍ∞Ä\", \"Ï∂úÏû•\", \"Ïû¨ÌÉùÍ∑ºÎ¨¥\"])\n",
        "            with col2:\n",
        "                schedule_date = st.date_input(\"ÎÇ†Ïßú\", value=datetime.now())\n",
        "                reason = st.text_area(\"ÏÇ¨Ïú† (ÏÑ†ÌÉù)\", height=100)\n",
        "\n",
        "            col1, col2 = st.columns(2)\n",
        "            with col1:\n",
        "                if st.button(\"Ï∂îÍ∞ÄÌïòÍ∏∞\", type=\"primary\", use_container_width=True):\n",
        "                    selected_member = next((m for m in members if m['name'] == selected_member_name), None)\n",
        "                    if selected_member:\n",
        "                        new_schedule = {\n",
        "                            'member_id': selected_member['id'],\n",
        "                            'type': schedule_type,\n",
        "                            'date': schedule_date.strftime('%Y-%m-%d'),\n",
        "                            'reason': reason\n",
        "                        }\n",
        "                        add_schedule(new_schedule)\n",
        "                        conflicts = check_conflicts(new_schedule['date'], new_schedule['member_id'])\n",
        "                        if len(conflicts) >= 2:\n",
        "                            st.session_state.notifications.append(\n",
        "                                f\"{new_schedule['date']}Ïóê {len(conflicts) + 1}Î™ÖÏù¥ Ìú¥Í∞ÄÏûÖÎãàÎã§.\"\n",
        "                            )\n",
        "                        st.session_state.show_add_modal = False\n",
        "                        st.success(\"ÏùºÏ†ïÏù¥ Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!\")\n",
        "                        st.rerun()\n",
        "            with col2:\n",
        "                if st.button(\"Ï∑®ÏÜå\", use_container_width=True):\n",
        "                    st.session_state.show_add_modal = False\n",
        "                    st.rerun()\n",
        "\n",
        "    st.markdown(\"---\")\n",
        "\n",
        "    year = st.session_state.current_date.year\n",
        "    month = st.session_state.current_date.month\n",
        "    first_day = datetime(year, month, 1)\n",
        "    first_weekday = first_day.weekday()\n",
        "    if first_weekday == 6:\n",
        "        first_weekday = 0\n",
        "    else:\n",
        "        first_weekday += 1\n",
        "    days_in_month = calendar.monthrange(year, month)[1]\n",
        "\n",
        "    days_header = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†']\n",
        "    cols = st.columns(7)\n",
        "    for i, day in enumerate(days_header):\n",
        "        with cols[i]:\n",
        "            st.markdown(f\"**{day}**\")\n",
        "\n",
        "    current_day = 1\n",
        "    week = 0\n",
        "\n",
        "    while current_day <= days_in_month:\n",
        "        cols = st.columns(7)\n",
        "        for col_idx in range(7):\n",
        "            with cols[col_idx]:\n",
        "                if week == 0 and col_idx < first_weekday:\n",
        "                    st.markdown(\"&nbsp;\")\n",
        "                elif current_day <= days_in_month:\n",
        "                    date_str = f\"{year}-{month:02d}-{current_day:02d}\"\n",
        "                    day_schedules = [s for s in schedules if s['date'] == date_str]\n",
        "                    if st.session_state.selected_member != 'all':\n",
        "                        day_schedules = [s for s in day_schedules if s['member_id'] == st.session_state.selected_member]\n",
        "\n",
        "                    st.markdown(f\"**{current_day}**\")\n",
        "\n",
        "                    for schedule in day_schedules[:3]:\n",
        "                        member = get_member_by_id(schedule['member_id'])\n",
        "                        if member:\n",
        "                            schedule_html = f\"\"\"\n",
        "                            <div class=\"schedule-item\" style=\"background-color: {member['color']}20; border-left: 3px solid {member['color']}\">\n",
        "                                <div style=\"font-weight: bold; font-size: 0.75em;\">{member['name']}</div>\n",
        "                                <div style=\"font-size: 0.7em; color: #666;\">{schedule['type']}</div>\n",
        "                            </div>\n",
        "                            \"\"\"\n",
        "                            st.markdown(schedule_html, unsafe_allow_html=True)\n",
        "                            if st.button(\"üóëÔ∏è\", key=f\"del_{schedule['id']}\", help=\"ÏÇ≠Ï†ú\"):\n",
        "                                delete_schedule(schedule['id'])\n",
        "                                st.rerun()\n",
        "\n",
        "                    if len(day_schedules) > 3:\n",
        "                        st.caption(f\"+{len(day_schedules) - 3}Í∞ú\")\n",
        "                    current_day += 1\n",
        "                else:\n",
        "                    st.markdown(\"&nbsp;\")\n",
        "        week += 1\n",
        "\n",
        "# ÌÜµÍ≥Ñ Î∑∞\n",
        "elif st.session_state.view == 'stats':\n",
        "    st.markdown(\"## üìä ÌÜµÍ≥Ñ ÎåÄÏãúÎ≥¥Îìú\")\n",
        "    col1, col2, col3, col4 = st.columns(4)\n",
        "    with col1:\n",
        "        st.metric(\"Ï†ÑÏ≤¥ ÌåÄÏõê\", f\"{stats['total_members']}Î™Ö\")\n",
        "    with col2:\n",
        "        st.metric(\"ÌèâÍ∑† ÏÇ¨Ïö© Ïó∞Ï∞®\", f\"{stats['avg_used_leave']:.1f}Ïùº\")\n",
        "    with col3:\n",
        "        st.metric(\"Ï¥ù ÏùºÏ†ï Ïàò\", f\"{stats['total_schedules']}Í±¥\")\n",
        "    with col4:\n",
        "        most_common = max(stats['type_count'].items(), key=lambda x: x[1])[0] if stats['type_count'] else '-'\n",
        "        st.metric(\"Í∞ÄÏû• ÎßéÏùÄ Ïú†Ìòï\", most_common)\n",
        "\n",
        "    st.markdown(\"---\")\n",
        "    st.markdown(\"### üë• ÌåÄÏõêÎ≥Ñ Ïó∞Ï∞® ÏÇ¨Ïö© ÌòÑÌô©\")\n",
        "\n",
        "    for member in members:\n",
        "        remaining = member['total_leave'] - member['used_leave']\n",
        "        percentage = (member['used_leave'] / member['total_leave']) * 100 if member['total_leave'] > 0 else 0\n",
        "        col1, col2 = st.columns([3, 7])\n",
        "        with col1:\n",
        "            st.markdown(f\"**{member['name']}**\")\n",
        "            st.caption(f\"ÏÇ¨Ïö©: {member['used_leave']}Ïùº | ÎÇ®ÏùÄ: {remaining}Ïùº | Ï†ÑÏ≤¥: {member['total_leave']}Ïùº\")\n",
        "        with col2:\n",
        "            st.progress(percentage / 100)\n",
        "\n",
        "    st.markdown(\"---\")\n",
        "    col1, col2 = st.columns(2)\n",
        "\n",
        "    with col1:\n",
        "        st.markdown(\"### üìã ÏùºÏ†ï Ïú†ÌòïÎ≥Ñ ÌòÑÌô©\")\n",
        "        if stats['type_count']:\n",
        "            type_df = pd.DataFrame([{'Ïú†Ìòï': k, 'Í∞úÏàò': v} for k, v in stats['type_count'].items()])\n",
        "            fig = px.pie(type_df, values='Í∞úÏàò', names='Ïú†Ìòï', hole=0.4)\n",
        "            fig.update_layout(height=400)\n",
        "            st.plotly_chart(fig, use_container_width=True)\n",
        "        else:\n",
        "            st.info(\"Îì±Î°ùÎêú ÏùºÏ†ïÏù¥ ÏóÜÏäµÎãàÎã§.\")\n",
        "\n",
        "    with col2:\n",
        "        st.markdown(\"### üìà ÏõîÎ≥Ñ ÏùºÏ†ï Ï∂îÏù¥\")\n",
        "        if schedules:\n",
        "            schedule_df = pd.DataFrame(schedules)\n",
        "            schedule_df['month'] = pd.to_datetime(schedule_df['date']).dt.to_period('M').astype(str)\n",
        "            monthly_count = schedule_df.groupby('month').size().reset_index(name='count')\n",
        "            fig = px.line(monthly_count, x='month', y='count', markers=True)\n",
        "            fig.update_layout(xaxis_title=\"Ïõî\", yaxis_title=\"ÏùºÏ†ï Ïàò\", height=400)\n",
        "            st.plotly_chart(fig, use_container_width=True)\n",
        "        else:\n",
        "            st.info(\"Îì±Î°ùÎêú ÏùºÏ†ïÏù¥ ÏóÜÏäµÎãàÎã§.\")\n",
        "\n",
        "    st.markdown(\"---\")\n",
        "    st.markdown(\"### üìã Ï†ÑÏ≤¥ ÏùºÏ†ï Î™©Î°ù\")\n",
        "    if schedules:\n",
        "        schedule_list = []\n",
        "        for schedule in schedules:\n",
        "            member = get_member_by_id(schedule['member_id'])\n",
        "            schedule_list.append({\n",
        "                'ÎÇ†Ïßú': schedule['date'],\n",
        "                'ÌåÄÏõê': member['name'] if member else 'Ïïå Ïàò ÏóÜÏùå',\n",
        "                'Ïú†Ìòï': schedule['type'],\n",
        "                'ÏÇ¨Ïú†': schedule.get('reason', '-')\n",
        "            })\n",
        "        df = pd.DataFrame(schedule_list).sort_values('ÎÇ†Ïßú', ascending=False)\n",
        "        st.dataframe(df, use_container_width=True, hide_index=True)\n",
        "        csv = df.to_csv(index=False, encoding='utf-8-sig')\n",
        "        st.download_button(\"üì• CSV Îã§Ïö¥Î°úÎìú\", csv, f\"ÌåÄÏùºÏ†ï_{datetime.now().strftime('%Y%m%d')}.csv\", \"text/csv\")\n",
        "    else:\n",
        "        st.info(\"Îì±Î°ùÎêú ÏùºÏ†ïÏù¥ ÏóÜÏäµÎãàÎã§.\")\n",
        "\n",
        "# ÌåÄÏõê Í¥ÄÎ¶¨ Î∑∞\n",
        "elif st.session_state.view == 'members':\n",
        "    st.markdown(\"## üë• ÌåÄÏõê Í¥ÄÎ¶¨\")\n",
        "    st.markdown(\"### ÌòÑÏû¨ ÌåÄÏõê\")\n",
        "\n",
        "    for member in members:\n",
        "        col1, col2, col3, col4 = st.columns([1, 3, 2, 2])\n",
        "        with col1:\n",
        "            st.markdown(f'<div style=\"width: 30px; height: 30px; background-color: {member[\"color\"]}; border-radius: 5px;\"></div>', unsafe_allow_html=True)\n",
        "        with col2:\n",
        "            st.markdown(f\"**{member['name']}**\")\n",
        "        with col3:\n",
        "            st.caption(f\"{member['used_leave']}/{member['total_leave']}Ïùº ÏÇ¨Ïö©\")\n",
        "        with col4:\n",
        "            remaining = member['total_leave'] - member['used_leave']\n",
        "            st.caption(f\"ÎÇ®ÏùÄ: {remaining}Ïùº\")\n",
        "\n",
        "    st.markdown(\"---\")\n",
        "    st.markdown(\"### ‚ûï ÌåÄÏõê Ï∂îÍ∞Ä\")\n",
        "\n",
        "    col1, col2, col3 = st.columns(3)\n",
        "    with col1:\n",
        "        new_name = st.text_input(\"Ïù¥Î¶Ñ\")\n",
        "    with col2:\n",
        "        new_total_leave = st.number_input(\"Ïó∞Ï∞® ÏùºÏàò\", min_value=0, value=15, step=1)\n",
        "    with col3:\n",
        "        colors = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#EC4899', '#14B8A6', '#F97316']\n",
        "        new_color = st.selectbox(\"ÏÉâÏÉÅ\", colors)\n",
        "\n",
        "    if st.button(\"ÌåÄÏõê Ï∂îÍ∞Ä\", type=\"primary\"):\n",
        "        if new_name:\n",
        "            new_member = {'name': new_name, 'total_leave': new_total_leave, 'color': new_color}\n",
        "            add_member(new_member)\n",
        "            st.success(f\"{new_name}ÎãòÏù¥ Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!\")\n",
        "            st.rerun()\n",
        "        else:\n",
        "            st.error(\"Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.\")\n",
        "\n",
        "st.markdown(\"---\")\n",
        "st.markdown(f\"<div style='text-align: center; color: gray;'>ÌåÄ ÏùºÏ†ï Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú | {datetime.now().strftime('%Y-%m-%d %H:%M')}</div>\", unsafe_allow_html=True)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c1bd9cff"
      },
      "source": [
        "!pip install streamlit"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "57b74d54"
      },
      "source": [
        "# Example of adding a new schedule via code\n",
        "new_schedule_example = {\n",
        "    'member_id': 'some_member_id',  # Replace with an actual member ID\n",
        "    'type': 'Ïó∞Ï∞®',\n",
        "    'date': '2023-12-25',\n",
        "    'reason': 'Holiday'\n",
        "}\n",
        "\n",
        "add_schedule(new_schedule_example)\n",
        "\n",
        "print(\"New schedule added successfully!\")"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}